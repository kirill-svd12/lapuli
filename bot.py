import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Bot version
BOT_VERSION = "1.0.0"

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# List of jokes
JOKES = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 = Dec 25",
    "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ª–æ–º–∞–µ—Ç –≥–æ–ª–æ–≤—É? –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç //",
    "–ü–æ—á–µ–º—É Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç C#",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ —Å–ø—Ä–æ—Å–∏–ª–∏, –∫–∞–∫ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ? '–Ø –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö'",
    "–ü–æ—á–µ–º—É JavaScript-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç C#",
    "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–Ω–∫—É? –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç can opener",
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 = Dec 25",
    "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ–≥–¥–∞ –µ–≥–æ —Å–ø—Ä–æ—Å–∏–ª–∏, –∫–∞–∫ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ? '–Ø –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö'",
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 = Dec 25",
    "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ª–æ–º–∞–µ—Ç –≥–æ–ª–æ–≤—É? –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç //"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send welcome message with buttons when the command /start is issued."""
    keyboard = [
        [
            InlineKeyboardButton("üòÑ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", callback_data='joke'),
            InlineKeyboardButton("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤–µ—Ä—Å–∏—é", callback_data='version')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button presses."""
    query = update.callback_query
    await query.answer()

    if query.data == 'joke':
        # Get a random joke from the list
        import random
        joke = random.choice(JOKES)
        keyboard = [
            [
                InlineKeyboardButton("üòÑ –ï—â—ë –∞–Ω–µ–∫–¥–æ—Ç", callback_data='joke'),
                InlineKeyboardButton("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤–µ—Ä—Å–∏—é", callback_data='version')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"{joke}\n\n–•–æ—Ç–∏—Ç–µ –µ—â—ë?",
            reply_markup=reply_markup
        )
    
    elif query.data == 'version':
        keyboard = [
            [
                InlineKeyboardButton("üòÑ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", callback_data='joke'),
                InlineKeyboardButton("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤–µ—Ä—Å–∏—é", callback_data='version')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}",
            reply_markup=reply_markup
        )

async def main():
    """Start the bot."""
    # Create the Application and pass it your bot's token
    TOKEN = "8054850906:AAEzFbH2FaeTjjQ7Z_kOlg8BOsV1iR--66o"
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # Start the Bot
    await application.initialize()
    await application.start()
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 
